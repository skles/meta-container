library(rhdf5)
library(dplyr)
library(stringr)
library(ggplot2)
source("sortr.r")
create.file <- function(file) {
h5createFile(file)
h5createGroup(file, "vis")
h5createGroup(file, "meas")
h5createGroup(file, "meas/hypersnort")
h5createGroup(file, "meas/froznicator")
}
perform.measurement <- function(file, algorithm, dataset, size) {
data <- str_c("data/", dataset, "_", size, ".csv")
dat <- read.csv(data)
if (algorithm == "hypersnort") {
rt <- system.time(hypersnort(dat$value))
} else if (algorithm == "froznicator") {
rt <- system.time(froznicator(dat$value))
}
return(c(size, rt["elapsed"]))
}
write.measurement <- function(file, algorithm, dataset, size) {
h5write(as.matrix(dat), file, str_c("/meas/", algorithm, "/", dataset))
}
read.data <- function(file, algorithm, dataset) {
name <- str_c("meas/", algorithm, "/", dataset)
dat <- data.frame(h5read(file, name=name))
colnames(dat) <- as.list(h5readAttributes(file, name=name)$columns)
dat$algorithm  <- algorithm
dat$dataset  <- dataset
return(dat)
}
#################################################################
create.file("repeng.h5")
h5closeAll()
file <- "repeng.h5"
alg <- c("froznicator", "hypersnort")
ds <- c("foo", "Î²Î±Ï", "baz")
froz.rt.foo <- data.frame()
froz.rt.bar <- data.frame()
froz.rt.baz <- data.frame()
hype.rt.foo <- data.frame()
hype.rt.bar <- data.frame()
hype.rt.baz <- data.frame()
for (n in 1:20) {
froz.rt.foo <- rbind(froz.rt.foo, perform.measurement("repeng.h5", "froznicator", "foo", n*250))
froz.rt.bar <- rbind(froz.rt.bar, perform.measurement("repeng.h5", "froznicator", "Î²Î±Ï", n*250))
froz.rt.baz <- rbind(froz.rt.baz, perform.measurement("repeng.h5", "froznicator", "baz", n*250))
hype.rt.foo <- rbind(hype.rt.foo, perform.measurement("repeng.h5", "hypersnort", "foo", n*250))
hype.rt.bar <- rbind(hype.rt.bar, perform.measurement("repeng.h5", "hypersnort", "Î²Î±Ï", n*250))
hype.rt.baz <- rbind(hype.rt.baz, perform.measurement("repeng.h5", "hypersnort", "baz", n*250))
}
h5write(as.matrix(froz.rt.foo), file, str_c("/meas/", "froznicator", "/", "foo"))
h5write(as.matrix(froz.rt.bar), file, str_c("/meas/", "froznicator", "/", "Î²Î±Ï"))
h5write(as.matrix(froz.rt.baz), file, str_c("/meas/", "froznicator", "/", "baz"))
h5write(as.matrix(hype.rt.foo), file, str_c("/meas/", "hypersnort", "/", "foo"))
h5write(as.matrix(hype.rt.bar), file, str_c("/meas/", "hypersnort", "/", "Î²Î±Ï"))
h5write(as.matrix(hype.rt.baz), file, str_c("/meas/", "hypersnort", "/", "baz"))
h5closeAll()
fid <- H5Fopen("repeng.h5")
for (a in alg) {
for (d in ds) {
alg.gid <- H5Gopen(fid, "/meas/froznicator/")
h5writeAttribute(attr="x86", h5obj=alg.gid, name="architecture")
path <- str_c("/meas/", a, "/", d)
print(path)
ds.gid <- H5Dopen(alg.gid, path)
h5writeAttribute(attr="2021-11-12 23:57:12", h5obj=ds.gid, name="time")
h5writeAttribute(attr=as.matrix(c("size", "runtime")), h5obj=ds.gid, name="columns")
}
}
dat <- do.call(rbind, lapply(c("foo", "Î²Î±Ï", "baz"), function(dataset) {
read.data("repeng.h5", "froznicator", dataset)
}))
dat2 <- do.call(rbind, lapply(c("foo", "Î²Î±Ï", "baz"), function(dataset) {
read.data("repeng.h5", "hypersnort", dataset)
}))
h5closeAll()
dat <- rbind(dat, dat2)
head(dat)
ggplot(dat, aes(x=size, y=runtime)) + geom_point(aes(shape=dataset, colour=algorithm))
ggplot(dat, aes(x=size, y=runtime, colour=algorithm)) + geom_point() +
facet_wrap(~dataset, scales="free_y")
ggsave("figure.pdf")
## SPDX-License-Identifier: MIT-0
library(ggplot2)
library(reshape2)
noise.level <- as.double(commandArgs(trailingOnly = TRUE)[1])
noise.level
sample.points <- as.integer(commandArgs(trailingOnly = TRUE)[2])
## Generate a discrete sample of function fn on domain [.from, .to]
## with N samples. Returns a data frame with x=input values,
## y=sampled function values
sample.fn <- function(.from, .to, fun=sin, N=1024) {
res <- data.frame(x=seq(from=.from, to=.to, length.out=N))
res$y <- fun(res$x)
return(res)
}
## Sample a simple sinus
dat <- sample.fn(0, 2*pi, N=sample.points)
## Augment a data frame with noise that affects computed y values
## (additive uniform noise; other types of noise may appear in real-world
## experiments)
gen.noisy.df <- function(dat, noise.strength=0.2) {
dat$y.noisy <- dat$y+runif(nrow(dat), -noise.strength, noise.strength)
return(dat)
}
fn.noisy <- gen.noisy.df(dat, noise.strength=noise.level)
# Write results to stdout
write.csv(fn.noisy[c("x","y.noisy")], stdout(), row.names = FALSE)
ggplot(fn.noisy, aes(x=x, y=y.noisy)) + geom_point(size=0.2)
ggsave("figure.pdf")
## SPDX-License-Identifier: MIT-0
library(ggplot2)
library(reshape2)
noise.level <- as.double(commandArgs(trailingOnly = TRUE)[1])
noise.level
sample.points <- as.integer(commandArgs(trailingOnly = TRUE)[2])
## Generate a discrete sample of function fn on domain [.from, .to]
## with N samples. Returns a data frame with x=input values,
## y=sampled function values
sample.fn <- function(.from, .to, fun=sin, N=1024) {
res <- data.frame(x=seq(from=.from, to=.to, length.out=N))
res$y <- fun(res$x)
return(res)
}
## Sample a simple sinus
dat <- sample.fn(0, 2*pi, N=sample.points)
## Augment a data frame with noise that affects computed y values
## (additive uniform noise; other types of noise may appear in real-world
## experiments)
gen.noisy.df <- function(dat, noise.strength=0.2) {
dat$y.noisy <- dat$y+runif(nrow(dat), -noise.strength, noise.strength)
return(dat)
}
fn.noisy <- gen.noisy.df(dat, noise.strength=noise.level)
# Write results to stdout
write.csv(fn.noisy[c("x","y.noisy")], stdout(), row.names = FALSE)
ggplot(fn.noisy, aes(x=x, y=y.noisy)) + geom_point(size=0.2)
ggsave("figure.pdf")
